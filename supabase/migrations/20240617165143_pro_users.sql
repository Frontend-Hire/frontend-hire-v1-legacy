create table "public"."pro_users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid
);


alter table "public"."pro_users" enable row level security;

CREATE UNIQUE INDEX pro_users_id_key ON public.pro_users USING btree (id);

CREATE UNIQUE INDEX pro_users_pkey ON public.pro_users USING btree (id);

CREATE UNIQUE INDEX pro_users_user_id_key ON public.pro_users USING btree (user_id);

alter table "public"."pro_users" add constraint "pro_users_pkey" PRIMARY KEY using index "pro_users_pkey";

alter table "public"."pro_users" add constraint "pro_users_id_key" UNIQUE using index "pro_users_id_key";

alter table "public"."pro_users" add constraint "pro_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."pro_users" validate constraint "pro_users_user_id_fkey";

alter table "public"."pro_users" add constraint "pro_users_user_id_key" UNIQUE using index "pro_users_user_id_key";

grant delete on table "public"."pro_users" to "anon";

grant insert on table "public"."pro_users" to "anon";

grant references on table "public"."pro_users" to "anon";

grant select on table "public"."pro_users" to "anon";

grant trigger on table "public"."pro_users" to "anon";

grant truncate on table "public"."pro_users" to "anon";

grant update on table "public"."pro_users" to "anon";

grant delete on table "public"."pro_users" to "authenticated";

grant insert on table "public"."pro_users" to "authenticated";

grant references on table "public"."pro_users" to "authenticated";

grant select on table "public"."pro_users" to "authenticated";

grant trigger on table "public"."pro_users" to "authenticated";

grant truncate on table "public"."pro_users" to "authenticated";

grant update on table "public"."pro_users" to "authenticated";

grant delete on table "public"."pro_users" to "service_role";

grant insert on table "public"."pro_users" to "service_role";

grant references on table "public"."pro_users" to "service_role";

grant select on table "public"."pro_users" to "service_role";

grant trigger on table "public"."pro_users" to "service_role";

grant truncate on table "public"."pro_users" to "service_role";

grant update on table "public"."pro_users" to "service_role";

create policy "Authenticated users can read their pro access"
on "public"."pro_users"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



